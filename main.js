!function(){"use strict";const e={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},t=document.querySelector(".profile__edit-button"),s=document.querySelector("#profile-title-input"),i=document.querySelector("#profile-description-input"),r=document.forms["profile-edit-form"],n=document.querySelector(".profile__add-button"),a=document.forms["add-card-form"],o=document.querySelector(".profile__image-edit-button"),l=document.forms["change-avatar-form"];class d{constructor(e,t){let{data:s,handleImageClick:i,handleLikeClick:r,handleDeleteCardClick:n}=e;this.name=s.name,this.link=s.link,this._id=s._id,this._isliked=s.isLiked,this._cardSelector=t,this._handleImageClick=i,this._handleLikeClick=r,this._handleDeleteCard=n}getID(){return this._id}_setEventListeners(){this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this)})),this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this)})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteCard(this)}))}handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}_handleLikeIcon(){this._isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}handleLike(e){this._isLiked=e,this._handleLikeIcon()}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getView(){return this._cardElement=this._getTemplate(),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._cardImage=this._cardElement.querySelector(".card__image"),console.log("Card Name:",this.name),console.log("Card Link:",this.link),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._cardImage.src=this.link,this._cardImage.alt=this.name,this._cardElement.querySelector(".card__title").textContent=this.name,this._setEventListeners(),this._handleLikeIcon(),this._cardElement}}class c{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.errorClass,this._errorClass=e.errorClass,this._formEl=t,this._inputEls=[...this._formEl.querySelectorAll(this._inputSelector)],this._submitButton=this._formEl.querySelector(this._submitButtonSelector)}_showInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent=" ",t.classList.remove(this._errorClass)}toggleButtonState(){this._hasInvalidInput(this._inputEls)?this.disableButton():this._enableButton()}resetValidation(){this.toggleButtonState(),this._inputEls.forEach((e=>{this._hideInputError(e)}))}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_hasInvalidInput(e){return!e.every((e=>e.validity.valid))}_checkFormValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_setEventListeners(){this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkFormValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._formEl.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class h{constructor(e){let{modalSelector:t}=e;this._modalElement=document.querySelector(t)}open(){this._modalElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._modalElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"!==e.key&&"esc"!==e.key&&27!==e.keyCode||this.close()};setEventListeners(){this._modalElement.querySelector(".modal__close").addEventListener("click",(()=>{this.close()})),this._modalElement.addEventListener("click",(e=>{e.target===this._modalElement&&this.close()}))}}class _ extends h{constructor(e){let{modalSelector:t,handleFormSubmit:s}=e;super({modalSelector:t}),this._modalForm=this._modalElement.querySelector(".modal__form"),this._handleFormSubmit=s,this._inputList=[...this._modalForm.querySelectorAll(".modal__input")],this._saveButton=this._modalForm.querySelector(".modal__button"),this._saveButtonText=this._saveButton.textContent}setSubmitHandler(e){this._handleFormSubmit=e}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._saveButton.textContent=e?t:this._saveButtonText}_getInputValues(){return this._inputValues={},this._inputList.forEach((e=>{this._inputValues[e.name]=e.value})),this._inputValues}close(){this._modalForm.reset(),super.close()}setEventListeners(){super.setEventListeners(),this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}}const m=new class{constructor(e){let{baseURL:t,headers:s}=e;this._baseURL=t,this._headers=s}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e,t){return fetch(e,t).then(this._checkResponse)}getUserInfo(){return fetch(`${this._baseURL}/users/me`,{headers:this._headers}).then(this._checkResponse)}getInitialCards(){return fetch(`${this._baseURL}/cards`,{headers:this._headers}).then(this._checkResponse)}getAppInfo(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}editProfile(e){let{name:t,about:s}=e;return fetch(`${this._baseURL}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then(this._checkResponse)}addCard(e){let{name:t,link:s}=e;return fetch(`${this._baseURL}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(this._checkResponse)}likeCardStatus(e,t){return fetch(`${this._baseURL}/cards/${e}/likes`,{method:t?"PUT":"DELETE",headers:this._headers}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseURL}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}changeAvatar(e){return fetch(`${this._baseURL}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}}({baseURL:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"f2352e83-00f2-4fed-84a7-f485841f4242","Content-Type":"application/json"}});m.getAppInfo().then((e=>{let[t,s]=e;f.setUserInfo({name:t.name,description:t.about}),f.changeAvatarImage(t.avatar),u.renderItems(s)})).catch((e=>{console.error("Failed to load app info: ${err}")}));const u=new class{constructor(e,t){let{renderer:s}=e;this._items=[],this._renderer=s,this._container=document.querySelector(t)}renderItems(e){this._items=e,this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({renderer:e=>{console.log("Rendering card with data:",e),u.addItem(b(e))}},".cards__list"),p=new _({modalSelector:"#add-card-modal",handleFormSubmit:e=>{p.renderLoading(!0),m.addCard({name:e.title,link:e.link}).then((e=>{u.addItem(b(e)),p.close()})).catch(console.error).finally((()=>{p.renderLoading(!1)}))}}),v=new _({modalSelector:"#profile-edit-modal",handleFormSubmit:e=>{v.renderLoading(!0),m.editProfile({name:e.title,about:e.bio}).then((e=>{f.setUserInfo({name:e.name,description:e.about}),v.close()})).catch(console.error).finally((()=>{v.renderLoading(!1)}))}}),E=new _({modalSelector:"#confirm-delete-modal",handleFormSubmit:y}),k=new _({modalSelector:"#change-avatar-modal",handleFormSubmit:e=>{k.renderLoading(!0),m.changeAvatar(e.link).then((e=>{f.changeAvatarImage(e.avatar),k.close()})).catch(console.error).finally((()=>{k.renderLoading(!1)}))}}),L=new class extends h{constructor(e){super({modalSelector:e}),this._modalCardImage=this._modalElement.querySelector("#modal-image"),this._modalCardTitle=this._modalElement.querySelector("#modal-title")}open(e){let{name:t,link:s}=e;this._modalCardImage.src=s,this._modalCardImage.alt=t,this._modalCardTitle.textContent=t,super.open()}}("#card-image-modal"),f=new class{constructor(e){let{name:t,description:s,avatar:i}=e;this._name=document.querySelector(t),this._description=document.querySelector(s),this._avatar=document.querySelector(i)}changeAvatarImage(e){this._avatar.src=e}getUserInfo(){return{name:this._name.textContent,bio:this._description.textContent,avatar:this._avatar.src}}setUserInfo(e){let{name:t,description:s}=e;this._name.textContent=t,this._description.textContent=s}}({name:".profile__title",description:".profile__description",avatar:".profile__image"});L.setEventListeners(),p.setEventListeners(),v.setEventListeners(),E.setEventListeners(),k.setEventListeners();const g=new c(e,r),S=new c(e,a),C=new c(e,l);function b(e){console.log("Card Data Passed to createCard:",e);const t=new d({data:e,handleImageClick:()=>{L.open(e)},handleLikeClick:e=>{m.likeCardStatus(e.getID(),!e._isLiked).then((t=>{e.handleLike(t.isLiked)})).catch(console.error)},handleDeleteCardClick:y},"#card-template");return t.getView()}function y(e){E.open(),E.setSubmitHandler((()=>{m.deleteCard(e.getID()).then((()=>{e.handleDeleteCard(),E.close()})).catch(console.error)}))}g.enableValidation(),S.enableValidation(),C.enableValidation(),t.addEventListener("click",(()=>{const e=f.getUserInfo();s.value=e.name,i.value=e.bio,v.open(),g.resetValidation()})),n.addEventListener("click",(()=>{p.open(),S.resetValidation()})),o.addEventListener("click",(()=>{k.open(),C.resetValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,